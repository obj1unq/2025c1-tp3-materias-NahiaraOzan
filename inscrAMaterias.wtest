import inscrAMaterias.*

describe "tests" {
// los requisitos de Objetos 2 son Objetos 1 y Matemática 1.
// Los requisitos de Objetos 3 son Objetos 2 y Bases de Datos.
// Los requisitos de Programación Concurrente son Objetos 1 y Bases de Datos.
// Biología 2 tiene como único requisito a Biología 1.
// Roque tiene aprobadas Elementos de Programación, Matemática 1, Objetos 1, Bases de Datos, Química y Biología 1.
// Tenemos a: Luisa, Romina y Alicia que aprobaron Elementos de Programación, Objetos 1, y Matemática 1;
// Ana que aprobó solamente Elementos de Programación. Todas están cursando Programación.
// Objetos 2 tiene cupo para 3 estudiantes.
    const programacion = new Carrera(materias = [elementosDeProgramacion, matematica1, objetos1, objetos2, objetos3, basesDeDatos, trabajoFinal])
    const medicina = new Carrera(materias = [quimica, biologia1, biologia2, anatomiaGeneral])
    const matematica1 = new Materia(correlativas = [] , inscriptos = [], listaDeEspera = [], cupo = 10)
    const elementosDeProgramacion = new Materia(correlativas = [] , inscriptos = [], listaDeEspera = [], cupo = 10)
    const objetos1 = new Materia(correlativas = [elementosDeProgramacion] , inscriptos = [], listaDeEspera = [], cupo = 10)
    const basesDeDatos = new Materia(correlativas = [elementosDeProgramacion, matematica1] , inscriptos = [], listaDeEspera = [], cupo = 10)
    const objetos2 = new Materia(correlativas = [objetos1, matematica1] , inscriptos = [], listaDeEspera = [], cupo = 3)
    const objetos3 = new Materia(correlativas = [matematica1, objetos2] , inscriptos = [], listaDeEspera = [], cupo = 3)
    const programacionConcurrente = new Materia(correlativas = [objetos1, basesDeDatos] , inscriptos = [], listaDeEspera = [], cupo = 10)
    const trabajoFinal = new Materia(correlativas = [objetos3, basesDeDatos, matematica1, programacionConcurrente] , inscriptos = [], listaDeEspera = [], cupo = 10)
    const biologia1 = new Materia(correlativas = [] , inscriptos = [], listaDeEspera = [], cupo = 10)
    const biologia2 = new Materia(correlativas = [biologia1] , inscriptos = [], listaDeEspera = [], cupo = 10)
    const quimica   = new Materia(correlativas = [] , inscriptos = [], listaDeEspera = [], cupo = 10)
    const anatomiaGeneral = new Materia(correlativas = [quimica, biologia2] , inscriptos = [], listaDeEspera = [], cupo = 10)
    const roque = new Estudiante(materiasAprobadas = [elementosDeProgramacion, matematica1, objetos1, basesDeDatos, 
                        quimica, biologia1] , carrerasEnCurso = [programacion, medicina], materiasInscriptas = [], materiasEnEspera = [])
    const luisa = new Estudiante(materiasAprobadas = [elementosDeProgramacion, matematica1, objetos1] , 
                                carrerasEnCurso = [programacion], materiasInscriptas = [], materiasEnEspera = [])
    const romina = new Estudiante(materiasAprobadas = [elementosDeProgramacion, matematica1, objetos1] , 
                                carrerasEnCurso = [programacion], materiasInscriptas = [], materiasEnEspera = [])
    const alicia = new Estudiante(materiasAprobadas = [elementosDeProgramacion, matematica1, objetos1] , 
                                carrerasEnCurso = [programacion], materiasInscriptas = [], materiasEnEspera = [])
    const ana = new Estudiante(materiasAprobadas = [elementosDeProgramacion] , carrerasEnCurso = [programacion], materiasInscriptas = [], materiasEnEspera = [])

    test "test1" {
        assert.that(roque.inscribirAMateria(objetos2))
        assert.notThat(roque.inscribirAMateria(objetos3))
        assert.notThat(roque.inscribirAMateria(objetos1))
    }

    test "test2" {
      assert.that(roque.puedeInscribirseA(objetos2))
      assert.that(roque.puedeInscribirseA(programacionConcurrente))
      assert.that(roque.puedeInscribirseA(biologia2))
    }
}
